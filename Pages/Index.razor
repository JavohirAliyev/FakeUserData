@inject IJSRuntime JSRuntime



@page "/"
@using System.Text
@using CSVFile

@code {


    public static int seed = 0;
    public static string locale = "en";
    public static double error = 0;

    static DataGenerator data = new DataGenerator();
    static List<PersonModel> GeneratedPeople = new();
    static ErrorGenerator errorGenerator = new();



    public void LoadData()
    {
        data.SetSeedAndLocale(seed, locale);
        GeneratedPeople.Clear();
        var results = data.GeneratePeople().Take(20);
        foreach (var result in results)
        {
            data.ImplementError(result, error);
            GeneratedPeople.Add(result);
        }
    }

    private void SetLocale(ChangeEventArgs e)
    {
        locale = e.Value.ToString();
        LoadData();
    }

    private void SetSeed(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            seed = value;
            LoadData();
        }
    }

    private void SetError(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out double value))
        {
            error = value;
            LoadData();
        }
    }

    private void GenerateRandomSeed()
    {
        Random rn = new();
        seed = rn.Next(1, 100000);
        LoadData();
        StateHasChanged();
    }

    [JSInvokable]
    public static void HandleScroll()
    {
        var newResults = data.GeneratePeople().Take(10);
        foreach (var result in newResults)
        {
            data.ImplementError(result, error);
            GeneratedPeople.Add(result);
        }
    }

    private string GenerateCsvContent(List<PersonModel> people)
    {
        var csv = new StringBuilder();
        csv.AppendLine(CSV.Serialize(people));

        return csv.ToString();
    }   

    private async Task DownloadCsv()
    {
        var csvContent = GenerateCsvContent(GeneratedPeople);
        var bytes = Encoding.UTF8.GetBytes(csvContent);
        var base64 = Convert.ToBase64String(bytes);
        var fileName = "people.csv";

        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64);
    }


}


<PageTitle>Fake Data</PageTitle>

<EditForm id="form" Model=@data>
<div class="container container-md mt-5 d-flex flex-row justify-content-between">
    <div class="dropdown d-flex flex-row">
        <label for="selectRegion" class="form-dropdown mr-3 h4">Region: </label>
        <select @onchange="SetLocale"  id="selectRegion" name="number">
            <option value="en">USA</option>
            <option value="pl">Poland</option>
            <option value="it">Italy</option>
            <option value="es">Spain</option>
        </select>

    </div>
    <div class="slider-control d-flex flex-row">
        <label for="errorRange" class="form-label mr-3 h4">Error:</label>
            <input oninput="updateNumericUpDown()" @onchange="SetError" value="@error" type="range" class="form-range mr-2" min="0" max="10" id="errorRange">
        <input oninput="updateNumericRange()" @onchange="SetError" value="@error" type="number" min="0" max="1000" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default" id="errorNumUpDown">
    </div>
    <div class="seed d-flex flex-row">
        <label for="seedNumUpDown" class="form-label mr-3 h4">Seed: </label>
        <input @oninput="SetSeed" value="@seed" type="number" class="form-control" aria-label="Sizing example input" aria-describedby="inputGroup-sizing-default" id="seedNumUpDown">
        <button class="btn btn-secondary" @onclick="GenerateRandomSeed" id="seedGenerator"><i class="bi bi-shuffle"></i></button>
    </div>
        <div class="btn btn-outline-dark" @onclick="DownloadCsv">Export</div>
</div>
</EditForm>


<div class="container mt-5" @onmousewheel = "StateHasChanged">
    <table class="table table-striped table-bordered">
        <thead class="p-2">
            <tr>
                <th scope="col">#</th>
                <th scope="col">Guid</th>
                <th scope="col">Name</th>
                <th scope="col">Address</th>
                <th scope="col">Phone number</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var p in GeneratedPeople)
            {
                <tr>
                    <td>@(GeneratedPeople.IndexOf(p)+1)</td>
                    <td>@p.Id</td>
                    <td>@p.Name</td>
                    <td>@p.Address</td>
                    <td>@p.Phone</td>
                </tr>
            }
        </tbody>
    </table>
</div>


<script>

    function updateNumericUpDown() {
        var rangeValue = document.getElementById('errorRange').value;
        document.getElementById('errorNumUpDown').value = rangeValue;
    }

    function updateNumericRange() {
        var rangeValue = document.getElementById('errorNumUpDown').value;
        document.getElementById('errorRange').value = Math.min(rangeValue, 10);
    }

    function generateRandomNumber() {
        var rn = Math.floor(Math.random()*100000);
        document.getElementById('seedNumUpDown').value = rn;
    }

    function downloadFile(fileName, contentBase64) {
        var link = document.createElement('a');
        link.download = fileName;
        link.href = 'data:text/csv;base64,' + contentBase64;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }


    document.addEventListener('DOMContentLoaded', function (e) {
        document.addEventListener('scroll', function (e) {
            let documentHeight = document.body.scrollHeight;
            let currentScroll = window.scrollY + window.innerHeight;
            let modifier = 200;
            if (currentScroll + modifier > documentHeight) {
                DotNet.invokeMethodAsync('FakeUserData', 'HandleScroll');
            }
        })
    })

</script>