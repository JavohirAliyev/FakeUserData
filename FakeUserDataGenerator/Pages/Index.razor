@inject IJSRuntime JSRuntime
@page "/"

@code {
    public static int seed = 0;
    public static string locale = "en";
    public static double error = 0;

    static DataGenerator dataGenerator = new DataGenerator(seed, locale);
    static ErrorGenerator errorGenerator = new ErrorGenerator(seed);
    static List<PersonModel> GeneratedPeople = new List<PersonModel>();

    public void LoadData()
    {
        GeneratedPeople.Clear();
        dataGenerator.UpdateSeedAndLocale(seed, locale);
        errorGenerator.UpdateSeed(seed);
        var results = dataGenerator.GeneratePeople().Take(20);
        foreach (var result in results)
        {
            errorGenerator.ImplementError(result, error);
            GeneratedPeople.Add(result);
        }
    }

    private void SetLocale(ChangeEventArgs e)
    {
        locale = e.Value?.ToString() ?? "en";
        LoadData();
    }

    private void SetSeed(ChangeEventArgs e)
    {
        if (int.TryParse(e.Value?.ToString(), out int value))
        {
            seed = value;
            LoadData();
        }
    }

    private void SetError(ChangeEventArgs e)
    {
        if (double.TryParse(e.Value?.ToString(), out double value))
        {
            error = value;
            LoadData();
        }
    }

    private void GenerateRandomSeed()
    {
        Random rn = new();
        seed = rn.Next(1, 100000);
        LoadData();
    }

    [JSInvokable]
    public async Task HandleScrollInstance()
    {
        await Task.Run(() =>
        {
            var newResults = dataGenerator.GeneratePeople().Take(10);
            foreach (var result in newResults)
            {
                errorGenerator.ImplementError(result, error);
                GeneratedPeople.Add(result);
            }
        });
        StateHasChanged();
    }

    private string GenerateCsvContent(List<PersonModel> people)
    {
        var csv = new StringBuilder();
        csv.AppendLine(CSV.Serialize(people));

        return csv.ToString();
    }

    private async Task DownloadCsv()
    {
        var csvContent = GenerateCsvContent(GeneratedPeople);
        var bytes = Encoding.UTF8.GetBytes(csvContent);
        var base64 = Convert.ToBase64String(bytes);
        var fileName = "people.csv";

        await JSRuntime.InvokeVoidAsync("downloadFile", fileName, base64);
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            await JSRuntime.InvokeVoidAsync("setDotNetReference", DotNetObjectReference.Create(this));
        }
    }
}

<PageTitle>Fake Data</PageTitle>

<div class="container-fluid px-5 py-4" style="max-width: 1400px;">
    <div class="card shadow-lg mb-4">
        <div class="card-body">
            <form class="row g-4 align-items-center">
                <div class="col-md-3">
                    <label for="selectRegion" class="form-label fw-bold">Region</label>
                    <select @onchange="SetLocale" id="selectRegion" class="form-select">
                        <option value="en">USA</option>
                        <option value="pl">Poland</option>
                        <option value="it">Italy</option>
                        <option value="es">Spain</option>
                    </select>
                </div>
                <div class="col-md-3">
                    <label for="errorRange" class="form-label fw-bold">Error</label>
                    <div class="input-group">
                        <input oninput="updateNumericUpDown()" @onchange="SetError" value="@error" type="range"
                            class="form-range" min="0" max="10" id="errorRange" style="width: 120px;">
                        <input oninput="updateNumericRange()" @onchange="SetError" value="@error" type="number" min="0"
                            max="1000" class="form-control ms-2" id="errorNumUpDown" style="max-width: 80px;">
                    </div>
                </div>
                <div class="col-md-3">
                    <label for="seedNumUpDown" class="form-label fw-bold">Seed</label>
                    <div class="input-group">
                        <input @oninput="SetSeed" value="@seed" type="number" class="form-control" id="seedNumUpDown"
                            style="max-width: 100px;">
                        <button class="btn btn-outline-secondary ms-2" type="button" @onclick="GenerateRandomSeed"
                            id="seedGenerator" title="Randomize">
                            <i class="bi bi-shuffle"></i>
                        </button>
                    </div>
                </div>
                <div class="col-md-3 d-flex align-items-end">
                    <button class="btn btn-dark w-100" type="button" @onclick="DownloadCsv">
                        <i class="bi bi-download me-2"></i>Export CSV
                    </button>
                </div>
            </form>
        </div>
    </div>

    <div class="card shadow-lg">
        <div class="card-body p-0">
            <div class="table-responsive">
                <table class="table table-hover table-bordered mb-0">
                    <thead class="table-dark">
                        <tr>
                            <th scope="col">#</th>
                            <th scope="col">Guid</th>
                            <th scope="col">Name</th>
                            <th scope="col">Address</th>
                            <th scope="col">Phone number</th>
                        </tr>
                    </thead>
                    <tbody>
                        @foreach (var p in GeneratedPeople)
                        {
                            <tr>
                                <td>@(GeneratedPeople.IndexOf(p) + 1)</td>
                                <td>@p.Id</td>
                                <td>@p.Name</td>
                                <td>@p.Address</td>
                                <td>@p.Phone</td>
                            </tr>
                        }
                    </tbody>
                </table>
            </div>
        </div>
    </div>
</div>

<script>
    function updateNumericUpDown() {
        var rangeValue = document.getElementById('errorRange').value;
        document.getElementById('errorNumUpDown').value = rangeValue;
    }

    function updateNumericRange() {
        var rangeValue = document.getElementById('errorNumUpDown').value;
        document.getElementById('errorRange').value = Math.min(rangeValue, 10);
    }

    function generateRandomNumber() {
        var rn = Math.floor(Math.random() * 100000);
        document.getElementById('seedNumUpDown').value = rn;
    }

    function downloadFile(fileName, contentBase64) {
        var link = document.createElement('a');
        link.download = fileName;
        link.href = 'data:text/csv;base64,' + contentBase64;
        document.body.appendChild(link);
        link.click();
        document.body.removeChild(link);
    }

    let dotNetRef = null;
    window.setDotNetReference = function (ref) {
        dotNetRef = ref;
    };

    document.addEventListener('DOMContentLoaded', function (e) {
        let isOnTheBottom = false;
        document.addEventListener('scroll', function (e) {
            let documentHeight = document.body.scrollHeight;
            let currentScroll = window.scrollY + window.innerHeight;
            let modifier = 300;
            if (currentScroll + modifier > documentHeight && !isOnTheBottom) {
                if (dotNetRef) {
                    dotNetRef.invokeMethodAsync('HandleScrollInstance');
                }
                isOnTheBottom = true;
            }
            if (documentHeight - currentScroll > modifier && isOnTheBottom) {
                isOnTheBottom = false;
            }
        })
    });
</script>